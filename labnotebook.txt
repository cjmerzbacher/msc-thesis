############################################################
LAB NOTEBOOK
############################################################
14 Feb 2022
gd_loop.ipnyb
- Rewrote fixed-architecture DualControl as a nn.Module to 
include a constructor with Ws as parameters
- Wrote gradient descent loop to run without error
Other
- Sent update to OM

15 Feb 2022
Other
- Started lab notebook :)
- Set up Github repo for thesis code
toy_model_sundials.ipynb
- Implemented allostery function and allosteric versions
of genetic circuit functions
- Plotted J1, J2 with X1 -> E1 allosteric control only
for DC, DA, UR - some numerical issues even with sundials

2 Mar 2022
020322.ipynb
EXPERIMENT SETTINGS
0   Model           J1/J2       Lambda      Adjoint     Solver
1   DualControl     E           10          Y           dopri5
2   DualControl     N           10          Y           dopri5
3   DualControl     E           1E-4        Y           dopri5
4   DualControl     N           1E-4        Y           dopri5
5   DualControl     E           10          N           dopri5
6   DualControl     N           10          N           dopri5
7   DualControl     E           1E-4        N           dopri5
8   DualControl     N           1E-4        N           dopri5

Cannot run with 5E4 time and DualControl function.
Ran with 100 time, simpler ODEFun function.

Next steps: Run 1x with complete time and numerical solver and plot
 results to check for numerical errors

6 Mar 2022
060322.ipynb
Model           J1/J2       Lambda      Adjoint     Solver  Timing  Time
ODEFun          -           -           N           dopri8  100     0.2s
DualControl     E          1E-4         N           dopri8  5E4     0.5s
DualControLEP   E          1E-4         N           dopri8  5E4     H40+s

EqualParams appears to be broken; avoid using this function for now.
Moving on with DualControl only...
Loss computation: 0.2s
Backpropagation: 0.9s
Optimizer.step: 0.3s
First GD loop works, repeating code results in an underflow error, 
even when integration time is set very small (10)
Examining gradients with loss.retain_grad(), loss.grad: -THIS IS INCORRECT
- Initially None (as expected)
- Then tensor(1.) - this seems wrong. Is it computing gradient wrt time and breaking?
Could also be loss function.

Next steps: compare solution results with ODEint solvers
- ODEint and torchdiffeq had similar solutions
- Switched to Sundials kernel and looked similar as well
- Settings: n1,2 = 2, thetas = 1, ks=1E-7

Examining weights of DualControl with func.W.grad:
tensor([[-5.2252e+03,  5.2363e+03],
        [ 1.5180e+04, -1.5211e+04],
        [ 1.0527e+11,  3.9387e+11]])

Ran Oisin's working code, saving gradients every 10 epochs. They don't change.
This is an issue with saving tensors. When grads are printed each epoch they do change.
Saved tensors out and plotted gradients (gradients_oisinmodel.png)

Next steps: searching for numerical errors by varying param values in grid search
Timing tests with different parameter values

7 Mar 2022
070322.ipynb 
Manually tried different parameter values 
(2,2,1,1,1E-7, 1E-7) = 0.6s
(2,2,1,1,1E-6, 1E-6) = 1.1s
(2,2,1,1,1E-5, 1E-5) = 7.1s (saved output to show sharpness)
(2,2,1,1,1E-4, 1E-4) = killed at 30s

(2,2,0.01,0.01,1E-7, 1E-7) = 0.8s
(2,2,0.1,0.1,1E-7, 1E-7) = 1.9s
(2,2,0.1,0.1,1E-6, 1E-6) = 2.7s -steeper than previous
(2,2,0.1,0.1,1E-5, 1E-5) = 13.3s - even steeper than previous
(2,2,0.01,0.01,1E-5, 1E-5) = 13.2s

(2,2,5,5,1E-7, 1E-7) = 1.9s
(2,2,5,5,1E-6, 1E-6) = 0.7s
(2,2,5,5,1E-5, 1E-5) = 5.7s


dopri5 - (2,2,1,1,1E-5, 1E-5) = 4.2s
dopri5 - (2,2,1,1,1E-6, 1E-6) = 0.7s

adjoint - (2,2,1,1,1E-5, 1E-5) = 4.3s
adjoint - (2,2,1,1,1E-6, 1E-6) = 0.7s
General upshot - theta matters less than k.
Should I do a more comprehensive test of this?
